#!/bin/bash

set -e

DATA_DIR=${DATA_DIR:-/data}
PGDATA=${PGDATA:-${DATA_DIR}/pgdata}
LOGDIR=${LOGDIR:-${DATA_DIR}/log}

mkdir -p "/run/postgresql"
mkdir -p "$DATA_DIR"
mkdir -p "$LOGDIR"

chown -R postgres "/run/postgresql"
chown -R postgres "$DATA_DIR"
chown -R postgres "$LOGDIR"

create_pgdata() {
   mkdir -p "$PGDATA"
   chown -R postgres "$PGDATA"

   if [ ! -d "$PGDATA/base" ]; then
      echo "Initalizing PGDATA directory at $PGDATA"
      su -c "initdb --locale en_US.UTF-8 -E UTF8 -D '$PGDATA'" - postgres

      sed -ri "s/^#(listen_addresses\s*=\s*)\S+/\1'*'/" "$PGDATA"/postgresql.conf
      { echo; echo 'host all all 0.0.0.0/0 trust'; } >> "$PGDATA"/pg_hba.conf
   fi
}

create_pgdata

PGDATA_VERSION="$(cat $PGDATA/PG_VERSION)"

if ! pg_config --version | grep -q -E "PostgreSQL $PGDATA_VERSION.[0-9]+"; then
   echo "PGDATA version $PGDATA_VERSION does not match installed $(pg_config --version). Trying to upgrade..."
   OLD_DIR="/opt/pgsql-$PGDATA_VERSION"
   if [ ! -d "$OLD_DIR" ]; then
      echo "No matching postres installation found for version $PGDATA_VERSION. Aborting."
      exit 1
   fi

   DATETIME="$(date +%Y%m%d-%H%M%S)"
   BACKUP_DIR="$PGDATA-old-$DATETIME"
   echo "Moving PGDATA to $DEST"
   mv "$PGDATA" "$BACKUP_DIR"

   create_pgdata

   echo "Running pg_upgrade..."

   su -c "cd '$LOGDIR' && pg_upgrade -b '$OLD_DIR/bin' -B /usr/bin -d '$BACKUP_DIR' -D '$PGDATA' -r" - postgres

   # remove superfluous shell scripts generated by pg_upgrade
   rm -f delete_old_cluster.sh
   rm -f analyze_new_cluster.sh

   echo "Completed pg_upgrade."
fi
